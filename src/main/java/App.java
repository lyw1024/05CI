import java.util.ArrayList;
import java.util.List;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    int counter = 0;
    List<Long> PrimeList = new ArrayList<>();

    public static void main(String[] args) {
        if (args.length < 1 || args.length > 10) {
            System.out.println("Please input a number:");
            System.exit(0);
        }
        App appObj = new App();
        long input1 = Long.parseLong(args[0]);
        long input2 = Long.parseLong(args[1]);
        if(args.length == 1) {
            System.out.println("Prime Factors: " + appObj.primeFactors(input1));
            System.out.println(appObj.isPrime(input1));
        }
        if (args.length == 2) {
            System.out.println("Number of Prime numbers: " + appObj.CountNumOfPrime(input1, input2));
        }

        if (args.length > 2) {
            System.out.println();
            System.out.println("prime Numbers in list are: " + appObj.ListOfPrime(args));
        }

    }

    public boolean isPrime(long number) {
        double max = Math.sqrt(number) + 1;
        if (number == 2) return true;
        if (number % 2 == 0) return false;
        for (long i = 3; i < max; i += 2) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }

    public List<Long> ListOfPrime(String[] args) {
        for (int j = 0; j < args.length; j++) {
            long inputNum = Long.parseLong(args[j]);
            if (isPrime(inputNum)) {
                PrimeList.add(inputNum);
            }
        }
            return PrimeList;
        }

    public  int CountNumOfPrime(long num1, long num2) {

        for (long i = num1; i <= num2; i++) {
            if (isPrime(i)) {
                counter++;
            }
        }
        return counter;
    }
        public List<Integer> primeFactors(long number){
            long n = number;
            List<Integer> factors = new ArrayList<Integer>();
            for (int i = 2; i <= n; i++) {
                while (n % i == 0) {
                    factors.add(i);
                    n /= i;
                }
            }
            return factors;
        }
    }

